import streamlit as st
import requests
import time
from dotenv import dotenv_values

# Demo metadata for search and filtering
DEMO_METADATA = {
    "categories": ["Technical"],
    "tags": ["SnapLogic", "Expert", "Support"]
}

# Load environment
env = dotenv_values(".env")
URL = "https://emea.snaplogic.com/api/1/rest/slsched/feed/ConnectFasterInc/snapLogic4snapLogic/AutoRFPAgent/ApiRfpAgent"
BEARER_TOKEN = "nNpLBJrd8FAtFh3TVC9xR97QAwWtJHgF"
timeout = 300

def typewriter(text: str, speed: int):
    tokens = text.split()
    container = st.empty()
    for index in range(len(tokens) + 1):
        curr_full_text = " ".join(tokens[:index])
        container.markdown(curr_full_text)
        time.sleep(1 / speed)

st.set_page_config(page_title="L'assistant intelligent SnapLogic")
st.title("L'assistant intelligent SnapLogic")

st.markdown("""
### Assistant IA sp√©cialis√© en RFP et en expertise technique, avec interface vocale

Obtenez des r√©ponses d√©taill√©es aux questions de RFP et aux demandes techniques, avec des informations issues de la documentation officielle, des discussions Slack et de diverses autres ressources SnapLogic.
""")

# Create columns with adjusted ratios for better widget display
col1, col2 = st.columns([1.2, 1.22])

with col1:
    # Embed ElevenLabs widget with adjusted container
    elevenlabs_html = """
    <elevenlabs-convai agent-id="nnoWPUe6P27G1OlPw25C"></elevenlabs-convai><script src="https://unpkg.com/@elevenlabs/convai-widget-embed" async type="text/javascript"></script>
    """
    st.components.v1.html(elevenlabs_html, height=225, width=340)

st.markdown("""
üí° **Interaction vocale disponible**
- Posez vos questions √† l‚Äôoral avec le widget vocal ci-dessus
- √âcoutez les r√©ponses vocales g√©n√©r√©es par l‚ÄôIA
- Con√ßu pour un usage mains libres

Exemples de requ√™tes :
- Quelles sont les certifications de s√©curit√© de SnapLogic ?
- D√©crivez l'approche de SnapLogic en mati√®re de gestion des API
- Quelle est la strat√©gie de reprise apr√®s sinistre de SnapLogic ?
- Comment SnapLogic g√®re-t-il le chiffrement des donn√©es au repos et en transit ?
- Quelles capacit√©s de surveillance sont disponibles sur la plateforme ?
- Expliquez l'int√©gration de SnapLogic avec les fournisseurs d'identit√©
""")

# Initialize chat history
if "expert_assistant" not in st.session_state:
    st.session_state.expert_assistant = []

# Display chat messages from history
for message in st.session_state.expert_assistant:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# React to user input
prompt = st.chat_input("Ask me anything about SnapLogic's technical capabilities")
if prompt:
    st.chat_message("user").markdown(prompt)
    st.session_state.expert_assistant.append({"role": "user", "content": prompt})
    
    with st.spinner("Working..."):
        data = {"prompt": prompt}
        headers = {
            'Authorization': f'Bearer {BEARER_TOKEN}'
        }
        response = requests.post(
            url=URL,
            data=data,
            headers=headers,
            timeout=timeout,
            verify=False
        )
        
        if response.status_code == 200:
            try:
                result = response.json()
                if "response" in result:
                    assistant_response = result["response"]
                    with st.chat_message("assistant"):
                        typewriter(text=assistant_response, speed=30)
                    st.session_state.expert_assistant.append({"role": "assistant", "content": assistant_response})
                else:
                    with st.chat_message("assistant"):
                        st.error("‚ùå Invalid response format from API")
            except ValueError:
                with st.chat_message("assistant"):
                    st.error("‚ùå Invalid JSON response from API")
        else:
            st.error(f"‚ùå Error while calling the SnapLogic API")
        st.rerun()
